global_costmap:
  global_frame: field #地图坐标系
  robot_base_frame: foot_print #机器人坐标系
  # 以此实现坐标变换

  update_frequency: 3.0 #代价地图更新频率
  publish_frequency: 3.0 #代价地图的发布频率
  transform_tolerance: 0.5 #等待坐标变换发布信息的超时时间
  resolution: 0.05
  width: 28. #
  height: 15
  trinary_costmap: false
  track_unknown_space: false
  static_map: true # 是否使用一个地图或者地图服务器来初始化全局代价地图，如果不使用静态地图，这个参数为false.

  plugins:
    - { name: static_map, type: "costmap_2d::StaticLayer" }
    - { name: obstacles, type: "costmap_2d::VoxelLayer" }
    - { name: inflation, type: "costmap_2d::InflationLayer" }

    #地图类型
  map_type: costmap
  #导航包所需要的传感器
  static_map: {enable: true}
  inflation: {inflation_radius: 0.35, lethal_cost_threshold: 50}

  obstacles:
    track_unknown_space: false
    combination_method: 1
    publish_voxel_map: true
    observation_sources: pointCloud
    #对传感器的坐标系和数据进行配置。这个也会用于代价地图添加和清除障碍物。例如，你可以用激光雷达传感器用于在代价地图添加障碍物，再添加kinect用于导航和清除障碍物。
    pointCloud: { frame_name: body_without_yaw, data_type: PointCloud2, topic: /local_map, marking: true, clearing: true }
